# Copyright  © 2023 Advanced Micro Devices, Inc.
# Copyright  © 2024-2025 Arm Limited.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Function to compile a set of shaders using the FidelityFX shader compiler driver.
#
# EXECUTABLE			Path to the FidelityFX SC tool executable.
# BASE_ARGS				The base arguments for the compiler.
# HLSL_BASE_ARGS		HLSL specific base args.
# PERMUTATION_ARGS		Permutation set to compile for.
# SHADER_FILES			A list of shader files to compile using the permutation matrix expanded from SC_PERMUTATION_ARGS.
#
# Returns
# A list of header files generated by the FidelityFX Shader Compiler driver.
function(compile_shaders EXECUTABLE BASE_ARGS HLSL_BASE_ARGS GLSL_BASE_ARGS PERMUTATION_ARGS INCLUDES_ARGS SHADER_FILES PERMUTATION_OUTPUTS)

	# message(STATUS ${FFXM_PASS_SHADER_OUTPUT_PATH})
	# message(STATUS ${EXECUTABLE})
	# message(STATUS ${BASE_ARGS})
	# message(STATUS ${HLSL_BASE_ARGS})
	# message(STATUS "PERM_ARGS=${PERMUTATION_ARGS}")
	# message(STATUS ${INCLUDES_ARGS})
	# message(STATUS ${SHADER_FILES})

	# HLSL requires -I <include0> -I <include1> etc.
	set(COMPILE_INCLUDE_ARGS )
	foreach(INC ${INCLUDES_ARGS})
		if (FFXM_USE_GLSL_SHADERS)
			list(APPEND COMPILE_INCLUDE_ARGS "-I${INC}")
		else()
			list(APPEND COMPILE_INCLUDE_ARGS "-I ${INC}")
		endif()
	endforeach(INC)

	if (FFXM_USE_GLSL_SHADERS)
		set(ENABLE_16BIT_TYPE "")
	else()
		set(ENABLE_16BIT_TYPE -enable-16bit-types)
	endif()

	foreach(PASS_SHADER ${SHADER_FILES})
		get_filename_component(PASS_SHADER_FILENAME ${PASS_SHADER} NAME_WE)
		get_filename_component(PASS_SHADER_TARGET ${PASS_SHADER} NAME_WLE)
		set(WAVE32_PERMUTATION_HEADER ${FFXM_PASS_SHADER_OUTPUT_PATH}/${PASS_SHADER_TARGET}_permutations.h)
		set(WAVE64_PERMUTATION_HEADER ${FFXM_PASS_SHADER_OUTPUT_PATH}/${PASS_SHADER_TARGET}_wave64_permutations.h)
		set(WAVE32_16BIT_PERMUTATION_HEADER ${FFXM_PASS_SHADER_OUTPUT_PATH}/${PASS_SHADER_TARGET}_16bit_permutations.h)
		set(WAVE64_16BIT_PERMUTATION_HEADER ${FFXM_PASS_SHADER_OUTPUT_PATH}/${PASS_SHADER_TARGET}_wave64_16bit_permutations.h)

		# combine base and permutation args
		if (FFXM_USE_GLSL_SHADERS)
			set(SC_ARGS ${BASE_ARGS} ${GLSL_BASE_ARGS} ${PERMUTATION_ARGS})
		else()
			set(SC_ARGS ${BASE_ARGS} ${HLSL_BASE_ARGS} ${PERMUTATION_ARGS})
		endif()

		if (${PASS_SHADER_TARGET} MATCHES "_vs$")
			if (FFXM_USE_GLSL_SHADERS)
				set(TARGET_PROFILE -S vert)
			else()
				set(TARGET_PROFILE -T vs_6_7)
			endif()
		elseif (${PASS_SHADER_TARGET} MATCHES "_fs$")
			if (FFXM_USE_GLSL_SHADERS)
				set(TARGET_PROFILE -S frag)
			else()
				set(TARGET_PROFILE -T ps_6_7)
			endif()
		else()
			if (FFXM_USE_GLSL_SHADERS)
				set(TARGET_PROFILE -S comp)
			else()
				set(TARGET_PROFILE -T cs_6_7)
			endif()
		endif()

			# Wave32 16-bit
			add_custom_command(
				OUTPUT ${WAVE32_16BIT_PERMUTATION_HEADER}
				COMMAND ${EXECUTABLE} ${SC_ARGS} -name=${PASS_SHADER_FILENAME}_16bit -DFFXM_HALF=1 ${ENABLE_16BIT_TYPE} ${TARGET_PROFILE} ${COMPILE_INCLUDE_ARGS} -output=${FFXM_PASS_SHADER_OUTPUT_PATH} ${PASS_SHADER}
				WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
				DEPENDS ${PASS_SHADER}
			)
			list(APPEND _PERMUTATION_OUTPUTS ${WAVE32_16BIT_PERMUTATION_HEADER})

	endforeach(PASS_SHADER)

	set(${PERMUTATION_OUTPUTS} ${_PERMUTATION_OUTPUTS} PARENT_SCOPE)
endfunction()

# macro to add shader output files to a list for dependencies
macro (add_shader_output)
    foreach (_SHADER_SRC ${ARGN})
		#message (STATUS ${_SHADER_SRC})
		list (APPEND FFXM_SC_PERMUTATION_OUTPUTS "${_SHADER_SRC}")
    endforeach()

	set (FFXM_SC_PERMUTATION_OUTPUTS ${FFXM_SC_PERMUTATION_OUTPUTS} PARENT_SCOPE)
endmacro()

file(GLOB PUBLIC_SHADERS
	FFXM_PUBLIC_SHADER_SOURCES
    "${FFXM_GPU_PATH}/fsr2/*.h"
    "${FFXM_GPU_PATH}/fsr2/*.hlsl"
	)

file(GLOB_RECURSE PRIVATE_SHADERS
    "${CMAKE_CURRENT_SOURCE_DIR}/shaders/*.hlsl")

file(GLOB PRIVATE_SOURCE
	"${FFXM_SRC_BACKENDS_PATH}/shared/*.h"
	"${FFXM_SRC_BACKENDS_PATH}/shared/*.cpp"
	"${FFXM_SRC_BACKENDS_PATH}/shared/blob_accessors/"
	"${FFXM_SRC_BACKENDS_PATH}/shared/blob_accessors/"
    "${CMAKE_CURRENT_SOURCE_DIR}/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")

set(FFXM_FSR_PRIVATE_SOURCE
	"${FFXM_SRC_BACKENDS_PATH}/shared/blob_accessors/ffxm_fsr2_shaderblobs.h"
	"${FFXM_SRC_BACKENDS_PATH}/shared/blob_accessors/ffxm_fsr2_shaderblobs.cpp")
list(APPEND PRIVATE_SOURCE ${FFXM_FSR_PRIVATE_SOURCE})

# Does this need to recurse??
include_directories(${FFXM_INCLUDE_PATH})
include_directories(${FFXM_HOST_PATH})
include_directories(${FFXM_SRC_BACKENDS_PATH}/shared)
include_directories(${FFXM_SRC_BACKENDS_PATH}/vk)
include_directories(${FFXM_GPU_PATH})
include_directories(${FFXM_COMPONENTS_PATH})
include_directories("../../../../")
include_directories("../../../../Khronos")

if(NOT MSVC)
	add_compile_options(-std=c++20)
else()
	add_compile_options(
		/std:c++20
		/Zc:strictStrings-
		/W4
		/wd4324
		/wd4456
		/wd4127
		/wd4457)
endif()

add_library(Arm_ASR_backend STATIC ${PRIVATE_SOURCE} ${PUBLIC_SOURCE} ${PRIVATE_SHADERS} ${PUBLIC_SHADERS})

if(NOT DEFINED FFXM_VOLK_PATH)
  set(FFXM_VOLK_PATH "" CACHE STRING "Path to Volk")
endif()
include_directories(${FFXM_VOLK_PATH})

if(NOT DEFINED FFXM_VULKAN_PATH)
  set(FFXM_VULKAN_PATH "" CACHE STRING "Path to Vulkan")
endif()
include_directories(${FFXM_VULKAN_PATH})

# Add some defines
target_compile_definitions(Arm_ASR_backend PUBLIC FFXM_VKLOADER_VOLK=1)

get_filename_component(FFXM_PASS_SHADER_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/../shaders/vk ABSOLUTE)
include_directories(${FFXM_PASS_SHADER_OUTPUT_PATH})

set_source_files_properties(${PRIVATE_SHADERS} PROPERTIES HEADER_FILE_ONLY TRUE)
set_source_files_properties(${PUBLIC_SHADERS} PROPERTIES HEADER_FILE_ONLY TRUE)

file(MAKE_DIRECTORY ${FFXM_PASS_SHADER_OUTPUT_PATH})

set(FFXM_SC_DEPENDENT_TARGET ffxm_backend_hlsl_shaders)
add_custom_target(${FFXM_SC_DEPENDENT_TARGET})

if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.20.0")
	cmake_policy(SET CMP0116 OLD)
endif()

# add pass shaders for all the components
target_compile_definitions(Arm_ASR_backend PRIVATE FFXM_FSR)
include (CMakeShadersFSR2.txt)

add_custom_target(ffxm_shader_permutations_vk DEPENDS ${FFXM_SC_PERMUTATION_OUTPUTS})
add_dependencies(${FFXM_SC_DEPENDENT_TARGET} ffxm_shader_permutations_vk)

# Make sure shader builds are a dependency of the backend
add_dependencies(Arm_ASR_backend ffxm_shader_permutations_vk)
